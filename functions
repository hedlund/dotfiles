# Functions to check which environment we are running in...
function is_mac() {
  [[ $OSTYPE =~ darwin* ]]
}

function is_windows() {
  [[ $OSTYPE =~ msys* ]]
}

function is_linux() {
  [[ $OSTYPE =~ linux* ]]
}

function is_wsl() {
  [[ $OSTYPE =~ linux* ]] && [[ "$(uname -r)" == *microsoft* ]]
}

function is_distrobox() {
  [[ $OSTYPE =~ linux* ]] && [[ "$DISTROBOX_ENTER_PATH" != "" ]]
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# `c` with no arguments opens the current directory in Visual Studio Code, otherwise
# opens the given location
function c() {
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Base64 encode a string
function enc64() {
  echo "$1" |base64
}

# Base64 decode a string
function dec64() {
  echo "$1" |base64 --decode
}

# Colorize the output of a Java-style log tail, or something similar
function colorize() {
 awk '
  /](\s)+ERROR/ {print "\033[31m" $0 "\033[39m"; next}
  /](\s)+WARN/  {print "\033[33m" $0 "\033[39m"; next}
  /](\s)+INFO/  {print "\033[32m" $0 "\033[39m"; next}
  1
'
}

# Enable GPG for SSH
# function sshfix() {
#   if is_windows; then
#     # On win, make sure we start ssh-pageant
#     eval $(/usr/bin/ssh-pageant -r -a "/tmp/.ssh-pageant-$USERNAME")
#   elif is_wsl; then
#     export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
#     if ! ss -a | grep -q "$SSH_AUTH_SOCK"; then
#       rm -f "$SSH_AUTH_SOCK"
#       wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
#       if test -x "$wsl2_ssh_pageant_bin"; then
#         (setsid nohup socat UNIX-LISTEN:"$SSH_AUTH_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin" >/dev/null 2>&1 &)
#       else
#         echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
#       fi
#       unset wsl2_ssh_pageant_bin
#     fi

#     export GPG_AGENT_SOCK="$HOME/.gnupg/S.gpg-agent"
#     if ! ss -a | grep -q "$GPG_AGENT_SOCK"; then
#       rm -rf "$GPG_AGENT_SOCK"
#       wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
#       if test -x "$wsl2_ssh_pageant_bin"; then
#         (setsid nohup socat UNIX-LISTEN:"$GPG_AGENT_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin --gpg S.gpg-agent" >/dev/null 2>&1 &)
#       else
#         echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
#       fi
#       unset wsl2_ssh_pageant_bin
#     fi
#   else
#     # On *nix, replace ssh-agent with gpg-agent
#     pkill ssh-agent ; pkill gpg-agent ; eval $(gpg-agent --daemon --enable-ssh-support --log-file $HOME/.gnupg/gpg-agent.log)
#   fi
# }

# Check if a command exists
function exists() {
    command -v "$1" >/dev/null 2>&1
}

# Confirm that the wants to continue
function confirm() {
    read -r -p "${1:-Are you sure?} [Y/n] " response
    if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
        return 0
    fi
    return 1
}

# Prompt the user before continuing
function prompt() {
    read -s -p "${1:-Press ENTER to continue}"; echo
}
